version: 2.1

# Définir les orbs
orbs:
  codecov: codecov/codecov@4.0.1

# Définir un job pour compiler et tester l'application
jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:17.0  # Utilisation d'une image Docker CircleCI OpenJDK
    steps:
      - checkout  # Récupérer le code
      - run:
          name: Build
          command: mvn -B -DskipTests clean package  # Nettoyer et construire sans exécuter les tests
      - run:
          name: Test
          command: mvn test  # Exécuter les tests
      - run:
          name: Jacoco file generation
          command: mvn jacoco:report
      - codecov/upload: # Utilisation de l'orb Codecov pour télécharger les résultats de couverture
          file: target/site/jacoco/jacoco.xml

      - run:
          name: Run Checkstyle and Generate Report
          command: mvn checkstyle:checkstyle

      - run:
          name: Deploy Checkstyle Report to GitHub Pages
          command: |
            # Configure les informations de l'utilisateur Git
            git config --global user.email "anisamara777@gmail.com"
            git config --global user.name "anis-saa77"
            
             # Change de répertoire pour la branche gh-pages
            mkdir gh-pages
            cp target/checkstyle-result.xml gh-pages/
            
            # Change de répertoire pour la branche gh-pages
            cd gh-pages

            # Initialisation d'un nouveau dépôt Git
            git init
            git add checkstyle-result.xml 
            git commit -m "Update Checkstyle Report [skip ci]"  # Commit avec le message approprié
            
            # Utilisation du token pour pousser les modifications
            git remote add origin https://github.com/anis-saa77/ceri-m1-techniques-de-test.git
            git push --force origin master:gh-pages
#      - run:
#          name: Copy Checkstyle Report to Output Directory
#          command: |
#            mkdir -p ~/reports/
#            cp target/checkstyle.xml ~/reports/checkstyle.xml

#      - store_artifacts:
#          path: target/site
#          destination: reports

 # Récupérer le code pour s'assurer que tous les fichiers sont disponibles

# Workflow pour orchestrer les jobs
workflows:
  version: 2
  build-and-upload:
    jobs:
      - build-and-test  # Exécuter d'abord le job de construction et tests
