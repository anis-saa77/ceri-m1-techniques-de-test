version: 2.1

# Définir les orbs
orbs:
  codecov: codecov/codecov@4.0.1

# Définir un job pour compiler et tester l'application
jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:17.0  # Utilisation d'une image Docker CircleCI OpenJDK
    steps:
      - checkout  # Récupérer le code
      - run:
          name: Build
          command: mvn -B -DskipTests clean package  # Nettoyer et construire sans exécuter les tests
      - run:
          name: Test
          command: mvn test  # Exécuter les tests
      - run:
          name: Jacoco file generation
          command: mvn jacoco:report
      - codecov/upload: # Utilisation de l'orb Codecov pour télécharger les résultats de couverture
          file: target/site/jacoco/jacoco.xml

      - run:
          name: Run Checkstyle and Generate Report
          command: mvn checkstyle:checkstyle

      - store_artifacts:
          path: target/checkstyle
          destination: checkstyle_reports

  update-readme:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Add execute permissions to the script
          command: chmod +x ./update_readme.sh  # Ajouter les permissions d'exécution
#      - run:
#          name: Update README with Checkstyle report link
#          command: ./update_readme.sh  # Appeler le script de mise à jour du README
#          environment:
#            CIRCLECI_TOKEN: $CIRCLECI_API_TOKEN
      - run:
          name: Update README with Checkstyle report link
          command: |
            RESPONSE=$(curl -s -u ${CIRCLECI_TOKEN}: \
              "https://circleci.com/api/v2/project/github/anis-saa77/ceri-m1-techniques-de-test/pipeline?limit=1&filter=successful")

            # Afficher la réponse JSON brute pour déboguer
            #echo "Réponse de l'API : $RESPONSE"
            
            # Vérifier si la réponse contient des erreurs
            if echo "$RESPONSE" | jq -e .items > /dev/null; then
              PIPELINE_ID=$(echo "$RESPONSE" | jq -r '.items[0].id')
              PIPELINE_NUMBER=$(echo "$RESPONSE" | jq -r '.items[0].number')
          
              WORKFLOW_RESPONSE=$(curl -s -H "Circle-Token: ${CIRCLECI_TOKEN}" \
                  "https://circleci.com/api/v2/pipeline/${PIPELINE_ID}/workflow")
              #echo "Réponse workflow : $WORKFLOW_RESPONSE"
            
              WORKFLOW_ID=$(echo "$WORKFLOW_RESPONSE" | jq -r '.items[0].id')
            
              # Récupérer le job number du job spécifique dans ce workflow
              #JOB_NUMBER=$(echo "$WORKFLOW_RESPONSE" | jq -r '.items[0].jobs[0].number')
              JOBS_RESPONSE=$(curl -s -H "Circle-Token: ${CIRCLECI_TOKEN}" \
                  "https://circleci.com/api/v2/workflow/${WORKFLOW_ID}/job")
          
              # Afficher les jobs pour débogage
              #echo "Réponse Jobs : $JOBS_RESPONSE"
          
              # Extraire le job number (en supposant qu'il y a au moins un job dans le workflow)
              JOB_NUMBER=$(echo "$JOBS_RESPONSE" | jq -r '.items[0].job_number')
          
              # Vérifier si JOB_NUMBER est vide
              if [ -z "$JOB_NUMBER" ]; then
                echo "Erreur : Aucun job trouvé dans ce workflow."
              else 
                # Générer l'URL des artefacts du job spécifique
                ARTIFACTS_URL="https://app.circleci.com/pipelines/github/anis-saa77/ceri-m1-techniques-de-test/${PIPELINE_NUMBER}/workflows/${WORKFLOW_ID}/jobs/${JOB_NUMBER}/artifacts"
            
                # Mettre à jour le README.md
                sed -i "s|# Rapport Checkstyle|# Rapport Checkstyle\n\nVoir le rapport Checkstyle des artefacts : [![Checkstyle](https://img.shields.io/badge/Checkstyle-passing-brightgreen)]($ARTIFACTS_URL)|" README.md
                echo "Lien vers les artefacts : $ARTIFACTS_URL"
              fi
            else
              echo "Erreur : La réponse de l'API ne contient pas de pipeline valide."
            fi

 # Récupérer le code pour s'assurer que tous les fichiers sont disponibles

# Workflow pour orchestrer les jobs
workflows:
  version: 2
  build-and-upload:
    jobs:
      - build-and-test  # Exécuter d'abord le job de construction et tests
      - update-readme:
            requires:
              - build-and-test




#      - run:
#          name: Deploy Checkstyle Report to GitHub Pages
#          command: |
#            # Configure les informations de l'utilisateur Git
#            git config --global user.email "anisamara777@gmail.com"
#            git config --global user.name "anis-saa77"
#
#            # Change de répertoire pour la branche gh-pages
#            mkdir gh-pages
#            cp target/checkstyle/index.html gh-pages/
#
#            # Change de répertoire pour la branche gh-pages
#            cd gh-pages
#
#            # Initialisation d'un nouveau dépôt Git
#            git init

#            # Ajouter le dépôt distant
#            git remote add origin https://$GH_TOKEN@github.com/anis-saa77/ceri-m1-techniques-de-test.git
#
#            # Ajouter et valider les modifications
#            git add index.html
#            git commit -m "Update Checkstyle Report [skip ci]"
#
#            # Pousser les modifications vers la branche gh-pages
#            git push --force origin master:gh-pages