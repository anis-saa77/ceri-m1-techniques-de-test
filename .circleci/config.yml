version: 2.1

# Définir les orbs
orbs:
  codecov: codecov/codecov@4.0.1

# Définir un job pour compiler et tester l'application
jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:17.0  # Utilisation d'une image Docker CircleCI OpenJDK
    steps:
      - checkout  # Récupérer le code
      - run:
          name: Build
          command: mvn -B -DskipTests clean package  # Nettoyer et construire sans exécuter les tests
      - run:
          name: Test
          command: mvn test  # Exécuter les tests
      - run:
          name: Jacoco file generation
          command: mvn jacoco:report
      - codecov/upload: # Utilisation de l'orb Codecov pour télécharger les résultats de couverture
          file: target/site/jacoco/jacoco.xml
      - run:
          name: Run Checkstyle and Generate Report
          command: mvn checkstyle:check
      - run:
          name: Generate Javadoc
          command: mvn javadoc:javadoc
      - run:
          name: Deploy to GitHub Pages
          command: |
#            git config --global user.email "anisamara777@gmail.com"
#            git config --global user.name "anis-saa77"
             git config --global user.name "CircleCI"
             git config --global user.email "circleci@example.com"
              
             git checkout --orphan gh-pages
             git rm -rf .  # Supprimer tous les fichiers actuels de la branche
              
              # Copier la documentation générée dans le répertoire approprié
             cp -r target/site/javadoc/* .
              
              # Ajouter, committer et pousser les changements
             git add .
             git commit -m "Déployer la documentation Javadoc sur GitHub Pages"
             git remote set-url origin https://$GH_TOKEN@github.com/anis-saa77/ceri-m1-techniques-de-test.git
             git push --force --set-upstream origin gh-pages

      - store_artifacts:
          path: target/checkstyle
          destination: checkstyle_reports

#  update-readme:
#    docker:
#      - image: cimg/openjdk:17.0
#    steps:
#      - checkout
#      - run:
#          name: Check commit message
#          command: |
#            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
#            echo $COMMIT_MESSAGE
#            if [[ $COMMIT_MESSAGE = "Mise à jour auto README" ]]; then
#              echo "Commit message matches, skipping update-readme job."
#              circleci step halt
#            fi
#
#      - run:
#          name: Update README with Checkstyle report link
#          command: |
#            RESPONSE=$(curl -s -u ${CIRCLECI_TOKEN}: \
#              "https://circleci.com/api/v2/project/github/anis-saa77/ceri-m1-techniques-de-test/pipeline?limit=1&filter=successful")
#
#            # Afficher la réponse JSON brute pour déboguer
#            #echo "Réponse de l'API : $RESPONSE"
#
#            # Vérifier si la réponse contient des erreurs
#            if echo "$RESPONSE" | jq -e .items > /dev/null; then
#              PIPELINE_ID=$(echo "$RESPONSE" | jq -r '.items[0].id')
#              PIPELINE_NUMBER=$(echo "$RESPONSE" | jq -r '.items[0].number')
#
#              WORKFLOW_RESPONSE=$(curl -s -H "Circle-Token: ${CIRCLECI_TOKEN}" \
#                  "https://circleci.com/api/v2/pipeline/${PIPELINE_ID}/workflow")
#              #echo "Réponse workflow : $WORKFLOW_RESPONSE"
#
#              WORKFLOW_ID=$(echo "$WORKFLOW_RESPONSE" | jq -r '.items[0].id')
#
#              # Récupérer le job number du job spécifique dans ce workflow
#              #JOB_NUMBER=$(echo "$WORKFLOW_RESPONSE" | jq -r '.items[0].jobs[0].number')
#              JOBS_RESPONSE=$(curl -s -H "Circle-Token: ${CIRCLECI_TOKEN}" \
#                  "https://circleci.com/api/v2/workflow/${WORKFLOW_ID}/job")
#
#              # Afficher les jobs pour débogage
#              #echo "Réponse Jobs : $JOBS_RESPONSE"
#
#              # Extraire le job number (en supposant qu'il y a au moins un job dans le workflow)
#              JOB_NUMBER=$(echo "$JOBS_RESPONSE" | jq -r '.items[0].job_number')
#
#              # Vérifier si JOB_NUMBER est vide
#              if [ -z "$JOB_NUMBER" ]; then
#                echo "Erreur : Aucun job trouvé dans ce workflow."
#              else
#                # Générer l'URL des artefacts du job spécifique
#                ARTIFACTS_URL="https://app.circleci.com/pipelines/github/anis-saa77/ceri-m1-techniques-de-test/${PIPELINE_NUMBER}/workflows/${WORKFLOW_ID}/jobs/${JOB_NUMBER}/artifacts"
#
#                # Mettre à jour le README.md
#                chmod +w README.md
#                sed -i "/## Rapport Checkstyle/{N;s|\(## Rapport Checkstyle\n\).*|\1Voir le rapport Checkstyle des artefacts : [![Checkstyle](https://img.shields.io/badge/Checkstyle-passing-brightgreen)]($ARTIFACTS_URL)|}" README.md
#
#                echo "Lien vers les artefacts : $ARTIFACTS_URL"
#              fi
#            else
#              echo "Erreur : La réponse de l'API ne contient pas de pipeline valide."
#            fi
#
#      - run:
#          name: Ajouter et committer les changements dans README
#          command: |
#            git config --global user.email "anisamara777@gmail.com"
#            git config --global user.name "anis-saa77"
#
#            # Mettre à jour l'URL du remote 'origin' avec l'authentification via GH_TOKEN
#            git remote set-url origin https://$GH_TOKEN@github.com/anis-saa77/ceri-m1-techniques-de-test.git
#
#            # Ajouter et committer les changements
#            git add README.md
#            git commit -m "Mise à jour auto README"
#
#            # Pousser les modifications avec le token d'authentification
#            git push origin master

# Workflow pour orchestrer les jobs
workflows:
  version: 2
  build-and-upload:
    jobs:
      - build-and-test  # Exécuter d'abord le job de construction et tests
#      - update-readme:
#            requires:
#              - build-and-test
#            filters:
#              branches:
#                only: master